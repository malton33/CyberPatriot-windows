function Update-Users{param([Parameter(Mandatory=$true)][string]$action,[Parameter(Mandatory=$true)][ValidateScript({Test-Path $_ -PathType 'leaf'})][string]$allowedpath,[Parameter(Mandatory=$true)][ValidateScript({Test-Path $_ -PathType 'leaf'})][string]$allowedadminpath)[CmdletBinding()]
    #requires -version 4.0
    #requires -RunAsAdministrator

    $ErrorActionPreference='Stop';$password=ConvertTo-SecureString "qwerty123QWERTY123$$$" -AsPlainText -Force;$ListUsers=Get-Content .\normalusers.txt;$ListAdmins=Get-Content .\adminusers.txt;$AllowedUsers=$ListUsers-split" ";Write-Verbose "Specified allowed users: $AllowedUsers";$AllowedAdmins=$ListAdmins-split" ";Write-Verbose "Specified allowed admins: $AllowedAdmins";$MachineUsers=get-wmiobject Win32_UserAccount -filter 'LocalAccount=TRUE'|select-object -expandproperty Name;$AllMachineUsers=$MachineUsers-join" "-split" "|Where-Object {$_};Write-Verbose "All users on machine: $AllMachineUsers";$AllAllowedUsers=$AllowedUsers+$AllowedAdmins;Write-Verbose "All allowed users: $AllAllowedUsers";$ExcludedUsers=@('Administrator','DefaultAccount','Guest','WDAGUtilityAccount');$ValidActions=@('all','user','admin','password');Write-Output "Running action $action" -BackgroundColor Black;if($ValidActions-notcontains$action){Write-Warning "Invalid action specified."};if($action-eq"user"-Or$action-eq"all"){Write-Output "Creating new users";foreach($user in $AllAllowedUsers){try{if($ExcludedUsers-notcontains$user){Write-Verbose "Checking if $user exists";Get-LocalUser $user;Write-Verbose "$user exists"}}catch{New-LocalUser $user -Password $password;Add-LocalGroupMember -Group "Users" -Member $user;Write-Verbose "Created user $user"}};Write-Output "Created new users";Write-Output "Removing disallowed users";foreach($user in $AllMachineUsers){if($ExcludedUsers-notcontains$user){try{if($AllAllowedUsers-notcontains$user){Remove-LocalUser $user;Write-Verbose "Removed user $user"}}catch{Write-Verbose "$user already exists or is invalid"}}else{Write-Warning "User $user is manually excluded"}};Write-Output "Removed disallowed users"};if($action-eq"password"-or$action-eq"all"){foreach($user in $AllMachineUsers){try{Set-LocalUser -Name "$user" -Password $password -PasswordNeverExpires false;Write-Verbose "Set password for $user"}catch{Write-Verbose "$user is invalid, skipping password..."}};Write-Output "Set user passwords"};if($action-eq"admin"-or$action-eq"all"){foreach($user in $AllMachineUsers){if($user-in$AllowedAdmins){try{Add-LocalGroupMember -Group "Administrators" -Member $user;Write-Verbose "Added $user to administrators"}catch{Write-Verbose "$user is already an admin"}}else{try{Remove-LocalGroupMember -Group "Administrators" -Member $user;Write-Verbose "Removed $user from administrators"}catch{Write-Verbose "$user is not an admin"}}};Write-Output "Set admin permissions"}}